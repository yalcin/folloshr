// Generated by CoffeeScript 1.9.1
(function() {
  var Twitter, _, chalk, client, config, db, follow, fs, getUser, listen_stream, program, search, sqlite3, unfollow;

  config = require('./config');

  Twitter = require('twitter');

  sqlite3 = require('sqlite3').verbose();

  chalk = require('chalk');

  program = require('commander');

  fs = require('fs');

  db = new sqlite3.Database('folloshr.sqlite');

  _ = require('underscore');

  client = new Twitter({
    consumer_key: config.consumer_key,
    consumer_secret: config.consumer_secret,
    access_token_key: config.access_token_key,
    access_token_secret: config.access_token_secret
  });

  getUser = function(fn) {
    return client.get('account/settings', {}, (function(_this) {
      return function(err, user, response) {
        return fn(user);
      };
    })(this));
  };

  search = function(keyword) {
    console.log("arama: " + (chalk.cyan(keyword)));
    return client.get('search/tweets', {
      q: keyword,
      count: 100
    }, function(err, items, response) {
      if (err) {
        throw err;
      }
      return _.each(items.statuses, function(item) {
        return follow(item);
      });
    });
  };

  listen_stream = function(keyword) {
    var stream_count;
    stream_count = 0;
    return client.stream('statuses/filter', {
      track: keyword
    }, function(stream) {
      stream.on('data', function(tweet) {
        console.log((chalk.yellow(tweet.user.screen_name)) + " " + (chalk.cyan(tweet.text)));
        stream_count++;
        if (stream_count === program.follow) {
          process.exit(1);
        }
        if (tweet.lang === program.lang && tweet.user.id) {
          return follow(tweet);
        }
      });
      return stream.on('error', function(error) {
        throw error;
      });
    });
  };

  follow = function(item) {
    var query;
    query = 'SELECT user_id FROM followings WHERE user_id=\'' + item.user.id + '\'';
    return db.serialize(function() {
      return db.get(query, function(err, row) {
        if (err) {
          throw err;
        }
        if (typeof row === 'undefined') {
          return client.post('friendships/create', {
            user_id: item.user.id
          }, function(error, follow, response) {
            if (error) {
              throw error;
            }
            return db.run('INSERT INTO followings(user_id) VALUES(?)', item.user.id, function() {
              return console.log(item.user.screen_name + " " + (chalk.green('following')));
            });
          });
        }
      });
    });
  };

  unfollow = function(user) {
    return db.serialize(function() {
      var countQuery;
      countQuery = 'SELECT COUNT(user_id) AS count FROM followings WHERE unfollowed_at IS NULL';
      return db.each(countQuery, function(err, row) {
        var count, max, parts, unfollowLoop;
        count = row.count;
        max = 50;
        parts = count > max ? Math.ceil(count / max) : 1;
        console.log(parts);
        unfollowLoop = function(i) {
          var query;
          console.log(i + " running");
          query = "SELECT user_id FROM followings WHERE unfollowed_at IS NULL LIMIT " + (i * parts) + ", " + max + " ";
          db.map(query, function(err, map) {
            var user_ids;
            user_ids = _.map(map, function(val, key) {
              return key;
            });
            user_ids = user_ids.join();
            return setTimeout(function() {
              console.log("timer: " + i);
              return client.get('friendships/lookup', {
                user_id: user_ids
              }, function(err, items, response) {
                var _i, item, j, len, results;
                console.log(err);
                if (err) {
                  throw "lookup: " + err;
                }
                _i = 0;
                results = [];
                for (j = 0, len = items.length; j < len; j++) {
                  item = items[j];
                  if (_.contains(item.connections, 'followed_by')) {
                    console.log(item.screen_name + " seni " + (chalk.green('takip ediyor')));
                  } else {
                    setTimeout(function() {
                      return client.post('friendships/destroy', {
                        user_id: item.id
                      }, function(err, data, response) {
                        if (err) {
                          console.log(err);
                          throw err;
                        }
                        return db.run('UPDATE followings SET unfollowed_at=CURRENT_TIMESTAMP WHERE user_id=?', item.id, function() {
                          return console.log(item.screen_name + " " + (chalk.red('unfollow')));
                        });
                      });
                    }, 2000 * _i);
                  }
                  results.push(_i++);
                }
                return results;
              });
            }, 5000 * i);
          });
          if (i < parts) {
            return unfollowLoop(i + 1);
          }
        };
        return unfollowLoop(0);
      });
    });
  };

  program.version('1.0.0').usage('-k hashtag -f 1000 -l tr').option('-k, --keyword [value]', 'Izlenecek kelime').option('-s, --search', 'Arama').option('-f, --follow <n>', 'Takip edilecek kullanici limiti default: 100', Number).option('-l, --lang [value]', 'Dil', String, 'tr').option('-u, --unfollow', 'Takip etmeyenleri takibi birak', function() {
    return getUser(function(user) {
      console.log("SORUNLU");
      return unfollow(user);
    });
  }).option('-c, --createdb', 'Veritabani olustur', function() {
    db.run('CREATE TABLE IF NOT EXISTS followings(id INTEGER PRIMARY KEY AUTOINCREMENT, user_id VARCHAR(50) NOT NULL, screen_name VARCHAR(255) NULL, followed_at DATETIME DEFAULT CURRENT_TIMESTAMP, unfollowed_at DATETIME NULL)');
    return console.log((chalk.green('db')) + " olusturuldu");
  }).parse(process.argv);

  if (!process.argv.slice(2).length) {
    program.outputHelp();
    process.exit(1);
  }

  if (!((program.unfollow != null) || (program.createdb != null))) {
    if (!((program.follow != null) || (program.keyword != null))) {
      program.outputHelp();
      process.exit(1);
    } else {
      if (program.search != null) {
        search(program.keyword);
      } else {
        listen_stream(program.keyword);
      }
    }
  }

}).call(this);
